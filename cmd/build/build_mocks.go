// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGoModContributor is a mock of GoModContributor interface
type MockGoModContributor struct {
	ctrl     *gomock.Controller
	recorder *MockGoModContributorMockRecorder
}

// MockGoModContributorMockRecorder is the mock recorder for MockGoModContributor
type MockGoModContributorMockRecorder struct {
	mock *MockGoModContributor
}

// NewMockGoModContributor creates a new mock instance
func NewMockGoModContributor(ctrl *gomock.Controller) *MockGoModContributor {
	mock := &MockGoModContributor{ctrl: ctrl}
	mock.recorder = &MockGoModContributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGoModContributor) EXPECT() *MockGoModContributorMockRecorder {
	return m.recorder
}

// Contribute mocks base method
func (m *MockGoModContributor) Contribute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contribute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Contribute indicates an expected call of Contribute
func (mr *MockGoModContributorMockRecorder) Contribute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contribute", reflect.TypeOf((*MockGoModContributor)(nil).Contribute))
}

// Cleanup mocks base method
func (m *MockGoModContributor) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockGoModContributorMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockGoModContributor)(nil).Cleanup))
}
